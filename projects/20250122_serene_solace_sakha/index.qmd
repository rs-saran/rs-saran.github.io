---
title: "Sakha: Building a Chatbot That Cares"
description: |
  A digital friend, designed to check in on you and help you improve your mood
date: 2025-04-16
categories: [NLP, chat-bot, LLM]
image: serene_solace_logo_nobg.png
draft: false
toc: false
---
[{{< fa brands github >}} source code](https://github.com/rs-saran/serene-solace-sakha){.btn target=_blank} 
<!-- [{{< fa solid bars >}} demo chat](https://github.com/rs-saran/serene-solace-sophy/blob/main/example_chat.txt){.btn target=_blank} -->
<br>

### Introduction 

In today’s fast-paced world, many of us silently wrestle with stress, loneliness, and emotional overwhelm. Therapy is a powerful avenue for healing, but not everyone needs—or can access—that level of care. Sometimes, all it takes is a gentle check-in, a thoughtful nudge, or the simple comfort of feeling seen.

That’s where Sakha began—not as a replacement for professional help, but as a small, caring presence always within reach. Not as a replacement for professional help, but as a small, caring presence—always there, always listening. A friend in your pocket, ready to ask how you're doing, suggest something that might lift your mood, or simply sit with you in a moment of stillness.

The vision was simple yet ambitious: create a chatbot that doesn’t just respond, but genuinely cares. One that offers warmth, understanding, and personalized encouragement—without judgment, pressure, or pretense.

The name Sakha, meaning “friend” in Sanskrit, wasn’t chosen lightly. It reflected the heart of what I wanted this project to embody: a companion who listens, nudges, and supports without judgment. Someone who remembers that you enjoy walks when you're anxious, or that music lifts your mood when you’re feeling off.


**Scope of the Project**  

A human friend can do many things—offer advice, share personal experiences, comfort you in tough times, or challenge your ideas. The list goes on and on, and no chatbot could hope to replicate all of that depth.

With Sakha, the aim wasn’t to do everything a human friend does but to offer a *starting point*—a focused subset of what a caring friend might provide in the everyday moments when you just need a check-in, a small nudge, or a reminder to care for yourself.  

Key functions included:
- Checking in on your emotional well-being.
- Suggesting activities to boost mood or break a cycle of stress.
- Offering a non-judgmental space to reflect or receive gentle reminders.

It’s a limited scope, yes, but it’s a foundation—one that can evolve over time as we explore more complex interactions, while keeping things simple and meaningful in the beginning.

---

## Building Sakha: One Decision at a Time

### **Where Do You Even Start?**

I didn’t set out with a 100-step master plan. Like most projects, Sakha started with a question: *How do I make a chatbot feel like a friend—not just in tone, but in behavior?* I knew I needed something flexible, expressive, and capable of holding a conversation in a way that didn’t feel robotic. That naturally pointed me toward LLMs.

### **Choosing the Mind – LLMs and How I Picked Mine**

With dozens of options, the choice wasn’t easy. GPT-4? Claude? LLaMA? Each model had tradeoffs in terms of access, pricing, and openness. Eventually, I chose to use open-source LLMs hosted through **Groq’s API**. Why?

- **Speed**: Groq’s inference speeds were impressive.
- **Flexibility**: It supports open-source models like LLaMA3.3, which means I’m not locked into one ecosystem.
- **Future-ready**: I can always self-host these models later if needed, thanks to their open-source nature.

I wrapped this through **LangChain**, which makes it easy to swap out models during experimentation and build proofs-of-concept quickly without worrying about underlying LLM plumbing.

---

### **LangGraph – Giving Structure to Conversations**

Once I picked the brain, I needed to figure out how to guide it. Not every conversation should be flat and linear—some needed state, branching logic, and even tool use.

That’s where **LangGraph** came in.

- It lets me create multi-step workflows.
- I can embed conditional logic into conversations (e.g., “Is the user in distress?” → switch flow).
- It gives me conversational memory for continuity.
- And it integrates smoothly with external tools and APIs.

LangGraph powers Sakha’s **conversation graph**—the engine that routes how chats progress depending on context and user state.

---

### **Flask – Powering Interaction with the Bot**

I used **Flask** not just to power Sakha’s simple UI but also to serve the core APIs that make chatting with the bot possible.

On the frontend, I kept things minimal—basic HTML and JavaScript for quick interactions. But behind the scenes, Flask handled the important parts: receiving user input, sending it to the LLM pipeline, and returning thoughtful responses.

It was the ideal choice because:
- It’s lightweight and easy to set up.
- It integrates seamlessly with Python, which is what the rest of Sakha is built on.
- It made building both a simple web UI and a chat API straightforward and fast.

In short, Flask gave me just enough without getting in the way—letting me focus on what mattered most: the experience of the conversation.

---

## Under the Hood: Core Components That Make Sakha Work

At its heart, Sakha is more than just a chatbot—it’s a thoughtfully layered system designed to feel human, stay context-aware, and respond with care. Instead of relying on a single prompt-response loop, I built Sakha around a modular architecture where each component has a clear responsibility.

Here’s a quick overview of the main building blocks:

- **Conversation Processor** – The entry point for all incoming user messages. It handles preprocessing of the `user_input` and streams it through the conversation graph.
- **Conversation Graph (LangGraph)** – A dynamic flow engine that guides conversations using stateful, branching logic. This is where Sakha’s adaptability comes from.
- **Conversation State** – A session-unique state object passed through the entire graph, allowing context to persist and evolve throughout the interaction.
- **Supervisor** – A smart dispatcher that decides *what kind* of conversation Sakha should engage in—whether it’s a normal chat, an activity suggestion, or even a crisis intervention.
- **Crisis Handler** – A specialized module triggered when signs of emotional distress are detected. It provides professional, 24/7 toll-free helpline numbers that users can reach out to.
- **Chat Engine** – The actual brain behind the conversations, powered by the LLM and dynamically generated prompts based on context and flow.
- **User, Checkpoint, and Memory Managers** – These handle persistent storage: tracking user info, conversation history, and flow progress across sessions.
- **Response Templates** – Modular prompt templates that ensure Sakha’s tone stays consistent and compassionate, while allowing for personalization based on user data.

Each of these pieces plays a role in making Sakha feel less like a machine—and more like a friend who listens, remembers, and responds with care.

---



